// <auto-generated />
using System;
using CustomUserManagerApi.Infrastructure_Layer.DataManager;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CustomUserManagerApi.Migrations
{
    [DbContext(typeof(UserDbContext))]
    partial class UserDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChatDomainUserDomain", b =>
                {
                    b.Property<Guid>("ChatMembersUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatsOfUserChatId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChatMembersUserId", "ChatsOfUserChatId");

                    b.HasIndex("ChatsOfUserChatId");

                    b.ToTable("ChatDomainUserDomain");
                });

            modelBuilder.Entity("CustomUserManagerApi.Models.Domains.ChatDomain", b =>
                {
                    b.Property<Guid>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChatId");

                    b.ToTable("ChatsTable");
                });

            modelBuilder.Entity("CustomUserManagerApi.Models.Domains.MessageDomain", b =>
                {
                    b.Property<Guid>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SendedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MessageId");

                    b.HasIndex("ChatId");

                    b.HasIndex("SenderId");

                    b.ToTable("MessagesTable");
                });

            modelBuilder.Entity("CustomUserManagerApi.Models.Domains.RoleDomain", b =>
                {
                    b.Property<Guid>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserRoleId");

                    b.ToTable("RolesTable");

                    b.HasData(
                        new
                        {
                            UserRoleId = new Guid("e6b1605b-7106-4fde-9f33-6b6da9de7043"),
                            RoleName = "user"
                        },
                        new
                        {
                            UserRoleId = new Guid("40dce753-a52e-4b2c-a833-58d20e4d1927"),
                            RoleName = "Admin"
                        });
                });

            modelBuilder.Entity("CustomUserManagerApi.Models.Domains.UserDomain", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UsersTable");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("aac3b39f-30a2-4e36-8860-a9d61c66f2a5"),
                            HashedPassword = "pmWkWSBCL51Bfkhn79xPuKBKHz//H6B+mY6G9/eieuM=",
                            UserEmail = "admin",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("RoleDomainUserDomain", b =>
                {
                    b.Property<Guid>("RolesOfUserUserRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersWithThisRoleUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RolesOfUserUserRoleId", "UsersWithThisRoleUserId");

                    b.HasIndex("UsersWithThisRoleUserId");

                    b.ToTable("RoleDomainUserDomain");

                    b.HasData(
                        new
                        {
                            RolesOfUserUserRoleId = new Guid("e6b1605b-7106-4fde-9f33-6b6da9de7043"),
                            UsersWithThisRoleUserId = new Guid("aac3b39f-30a2-4e36-8860-a9d61c66f2a5")
                        },
                        new
                        {
                            RolesOfUserUserRoleId = new Guid("40dce753-a52e-4b2c-a833-58d20e4d1927"),
                            UsersWithThisRoleUserId = new Guid("aac3b39f-30a2-4e36-8860-a9d61c66f2a5")
                        });
                });

            modelBuilder.Entity("ChatDomainUserDomain", b =>
                {
                    b.HasOne("CustomUserManagerApi.Models.Domains.UserDomain", null)
                        .WithMany()
                        .HasForeignKey("ChatMembersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomUserManagerApi.Models.Domains.ChatDomain", null)
                        .WithMany()
                        .HasForeignKey("ChatsOfUserChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomUserManagerApi.Models.Domains.MessageDomain", b =>
                {
                    b.HasOne("CustomUserManagerApi.Models.Domains.ChatDomain", "ChatDom")
                        .WithMany("ChatMessages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomUserManagerApi.Models.Domains.UserDomain", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatDom");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("RoleDomainUserDomain", b =>
                {
                    b.HasOne("CustomUserManagerApi.Models.Domains.RoleDomain", null)
                        .WithMany()
                        .HasForeignKey("RolesOfUserUserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomUserManagerApi.Models.Domains.UserDomain", null)
                        .WithMany()
                        .HasForeignKey("UsersWithThisRoleUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomUserManagerApi.Models.Domains.ChatDomain", b =>
                {
                    b.Navigation("ChatMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
